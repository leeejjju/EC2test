name: CI pipeline for EC2 container server test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository !!!
        uses: actions/checkout@v3

      - name: Set up Python 3.10 !!!
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Dependencies !!!
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Log in to DockerHub !!!
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Docker Image !!!
        env:
          NAME: ${{ secrets.DOCKERHUB_USERNAME }}
          REPO: djangoimg
        run: |
          docker build --no-cache -t $NAME/$REPO:latest .
          docker push $NAME/$REPO:latest

      - name: Decode SSH Private Key !!!
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 -d > ec2-key.pem
          chmod 600 ec2-key.pem

      - name: Connect to EC2 and deploy !!!
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'

            CONTAINER_NAME=django00
            IMAGE_NAME=leeejjju/djangoimg:latest

            if [ "$(docker ps -aq -f name=^/${CONTAINER_NAME}$)" ]; then
              echo "There is exist container named $CONTAINER_NAME! Removing container and image..."
              docker stop "$CONTAINER_NAME"
              docker rm "$CONTAINER_NAME"
              docker rmi "$IMAGE_NAME"
            else
              echo "There is no container named $CONTAINER_NAME"
            fi

            docker run --name "$CONTAINER_NAME" -d -p 9090:80 "$IMAGE_NAME"
            echo "Updated container $CONTAINER_NAME created :)"
          EOF

